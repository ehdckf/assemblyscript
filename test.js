// generated by bwasm authored by kiwiyou
import fs from "fs";
const code = Buffer.from(
        "",
        "base64",
);
let wasm_memory;
const write_stdout = (addr, len) => {
        console.log(addr, len);
        fs.writeSync(1, new Uint8Array(wasm_memory.buffer, addr, len));
};
const read_stdin = (addr, len) => fs.readSync(0, new Uint8Array(wasm_memory.buffer, addr, len));
WebAssembly.instantiate(code, { env: { write_stdout, read_stdin } }).then((wasm) => {
        const { entry, __heap_base, memory } = wasm.instance.exports;
        memory.grow(1000);
        wasm_memory = memory;
        entry(__heap_base.value);
});

/*
use std::io::Write;

use io::Reader;

pub fn main(stdout: &mut impl Write) {
    let mut reader = Reader::new(1 << 16);
    let mut tokens = reader.tokens().flat_map(str::parse::<u32>);
    let n = tokens.next().unwrap() as usize;
    let mut count = vec![0; 10_001];
    for x in tokens.by_ref().take(n) {
        count[x as usize] += 1;
    }
    for (i, &c) in count.iter().enumerate() {
        for _ in 0..c {
            writeln!(stdout, "{i}").ok();
        }
    }
}
*/
